{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Consumer Harm Monte Carlo Simulation\n",
    "\n",
    "This notebook performs Monte Carlo simulation to analyze consumer harm across various scenarios including:\n",
    "- Hidden fees\n",
    "- Service failures\n",
    "- Damages with claim denials\n",
    "\n",
    "## Setup and Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "from plotly.subplots import make_subplots\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Display settings\n",
    "pd.set_option('display.float_format', lambda x: '${:,.2f}'.format(x))\n",
    "plt.style.use('seaborn-v0_8-darkgrid')\n",
    "\n",
    "# Set random seed for reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "print(\"Setup complete!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configuration Parameters\n",
    "\n",
    "These are the key parameters for our simulation. You can adjust these values to see how they affect the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of simulations\n",
    "N_SIMULATIONS = 10000\n",
    "\n",
    "# Annual transaction volume\n",
    "ANNUAL_TRANSACTIONS = 1.73e6  # 1.73 million\n",
    "\n",
    "# Service failure penalty cost\n",
    "SERVICE_FAILURE_PENALTY = 1000\n",
    "\n",
    "# Distribution parameters (using triangular distributions)\n",
    "PARAMS = {\n",
    "    'base_service_cost': {\n",
    "        'min': 2500,\n",
    "        'mode': 3200,  # Most likely value\n",
    "        'max': 4000\n",
    "    },\n",
    "    'hidden_fees': {\n",
    "        'min': 0,\n",
    "        'mode': 375,\n",
    "        'max': 1100\n",
    "    },\n",
    "    'service_failure_prob': {\n",
    "        'min': 0.15,  # 15%\n",
    "        'mode': 0.30,  # 30%\n",
    "        'max': 0.45   # 45%\n",
    "    },\n",
    "    'claim_denial_prob': {\n",
    "        'min': 0.60,  # 60%\n",
    "        'mode': 0.85,  # 85%\n",
    "        'max': 0.95   # 95%\n",
    "    },\n",
    "    'damage_occurrence_rate': {\n",
    "        'min': 0.05,  # 5%\n",
    "        'mode': 0.12,  # 12%\n",
    "        'max': 0.25   # 25%\n",
    "    },\n",
    "    'average_damage_value': {\n",
    "        'min': 500,\n",
    "        'mode': 2500,\n",
    "        'max': 10000\n",
    "    }\n",
    "}\n",
    "\n",
    "# Display parameters\n",
    "params_df = pd.DataFrame(PARAMS).T\n",
    "params_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Core Simulation Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def triangular_sample(min_val, mode_val, max_val, size):\n",
    "    \"\"\"Generate samples from triangular distribution\"\"\"\n",
    "    return np.random.triangular(min_val, mode_val, max_val, size)\n",
    "\n",
    "def run_monte_carlo_simulation(params=PARAMS, n_sims=N_SIMULATIONS, verbose=True):\n",
    "    \"\"\"\n",
    "    Run Monte Carlo simulation for consumer harm\n",
    "    \n",
    "    Returns:\n",
    "        DataFrame with simulation results\n",
    "    \"\"\"\n",
    "    if verbose:\n",
    "        print(f\"Running {n_sims:,} simulations...\")\n",
    "    \n",
    "    # Generate random samples for each parameter\n",
    "    service_costs = triangular_sample(\n",
    "        params['base_service_cost']['min'],\n",
    "        params['base_service_cost']['mode'],\n",
    "        params['base_service_cost']['max'],\n",
    "        n_sims\n",
    "    )\n",
    "    \n",
    "    hidden_fees = triangular_sample(\n",
    "        params['hidden_fees']['min'],\n",
    "        params['hidden_fees']['mode'],\n",
    "        params['hidden_fees']['max'],\n",
    "        n_sims\n",
    "    )\n",
    "    \n",
    "    service_failure_probs = triangular_sample(\n",
    "        params['service_failure_prob']['min'],\n",
    "        params['service_failure_prob']['mode'],\n",
    "        params['service_failure_prob']['max'],\n",
    "        n_sims\n",
    "    )\n",
    "    \n",
    "    claim_denial_probs = triangular_sample(\n",
    "        params['claim_denial_prob']['min'],\n",
    "        params['claim_denial_prob']['mode'],\n",
    "        params['claim_denial_prob']['max'],\n",
    "        n_sims\n",
    "    )\n",
    "    \n",
    "    damage_occurrence_rates = triangular_sample(\n",
    "        params['damage_occurrence_rate']['min'],\n",
    "        params['damage_occurrence_rate']['mode'],\n",
    "        params['damage_occurrence_rate']['max'],\n",
    "        n_sims\n",
    "    )\n",
    "    \n",
    "    damage_values = triangular_sample(\n",
    "        params['average_damage_value']['min'],\n",
    "        params['average_damage_value']['mode'],\n",
    "        params['average_damage_value']['max'],\n",
    "        n_sims\n",
    "    )\n",
    "    \n",
    "    # Simulate events\n",
    "    service_failures = np.random.random(n_sims) < service_failure_probs\n",
    "    damage_occurred = np.random.random(n_sims) < damage_occurrence_rates\n",
    "    claims_denied = np.random.random(n_sims) < claim_denial_probs\n",
    "    \n",
    "    # Calculate harm components\n",
    "    service_failure_harm = service_failures * SERVICE_FAILURE_PENALTY\n",
    "    damage_harm = damage_occurred * damage_values * claims_denied\n",
    "    \n",
    "    # Total harm per customer\n",
    "    total_harm = hidden_fees + service_failure_harm + damage_harm\n",
    "    \n",
    "    # Create results dataframe\n",
    "    results = pd.DataFrame({\n",
    "        'service_cost': service_costs,\n",
    "        'hidden_fees': hidden_fees,\n",
    "        'service_failure': service_failures,\n",
    "        'service_failure_harm': service_failure_harm,\n",
    "        'damage_occurred': damage_occurred,\n",
    "        'damage_value': damage_values,\n",
    "        'claim_denied': claims_denied,\n",
    "        'damage_harm': damage_harm,\n",
    "        'total_harm': total_harm\n",
    "    })\n",
    "    \n",
    "    if verbose:\n",
    "        print(\"Simulation complete!\")\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run Base Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run the simulation\n",
    "results = run_monte_carlo_simulation()\n",
    "\n",
    "# Display first few rows\n",
    "print(\"\\nFirst 10 simulation results:\")\n",
    "results.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate Key Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_statistics(results):\n",
    "    \"\"\"Calculate comprehensive statistics from simulation results\"\"\"\n",
    "    harm = results['total_harm']\n",
    "    \n",
    "    stats_dict = {\n",
    "        'Mean Harm': harm.mean(),\n",
    "        'Median Harm': harm.median(),\n",
    "        'Std Dev': harm.std(),\n",
    "        'Min Harm': harm.min(),\n",
    "        'Max Harm': harm.max(),\n",
    "        '10th Percentile': harm.quantile(0.10),\n",
    "        '25th Percentile': harm.quantile(0.25),\n",
    "        '75th Percentile': harm.quantile(0.75),\n",
    "        '90th Percentile': harm.quantile(0.90),\n",
    "        '95th Percentile': harm.quantile(0.95),\n",
    "        '99th Percentile': harm.quantile(0.99)\n",
    "    }\n",
    "    \n",
    "    # Count statistics\n",
    "    stats_dict['Customers with Zero Harm'] = (harm == 0).sum()\n",
    "    stats_dict['Customers with Harm > $1000'] = (harm > 1000).sum()\n",
    "    stats_dict['Customers with Harm > $5000'] = (harm > 5000).sum()\n",
    "    \n",
    "    # Percentage statistics\n",
    "    stats_dict['% with Zero Harm'] = (harm == 0).sum() / len(harm) * 100\n",
    "    stats_dict['% with Harm > $1000'] = (harm > 1000).sum() / len(harm) * 100\n",
    "    stats_dict['% with Harm > $5000'] = (harm > 5000).sum() / len(harm) * 100\n",
    "    \n",
    "    # Industry-wide annual impact\n",
    "    stats_dict['Annual Industry Impact (Mean)'] = stats_dict['Mean Harm'] * ANNUAL_TRANSACTIONS\n",
    "    stats_dict['Annual Industry Impact (95th %ile)'] = stats_dict['95th Percentile'] * ANNUAL_TRANSACTIONS\n",
    "    \n",
    "    return stats_dict\n",
    "\n",
    "# Calculate and display statistics\n",
    "stats = calculate_statistics(results)\n",
    "\n",
    "# Create a formatted display\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"KEY STATISTICS\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "print(\"\\nPer-Customer Harm Statistics:\")\n",
    "print(\"-\"*30)\n",
    "for key, value in stats.items():\n",
    "    if 'Annual' not in key and '%' not in key and 'Customers' not in key:\n",
    "        print(f\"{key:.<25} ${value:>12,.2f}\")\n",
    "\n",
    "print(\"\\nDistribution Insights:\")\n",
    "print(\"-\"*30)\n",
    "for key, value in stats.items():\n",
    "    if 'Customers' in key:\n",
    "        print(f\"{key:.<25} {value:>12,d}\")\n",
    "    elif '%' in key:\n",
    "        print(f\"{key:.<25} {value:>12.1f}%\")\n",
    "\n",
    "print(\"\\nIndustry-Wide Annual Impact:\")\n",
    "print(\"-\"*30)\n",
    "for key, value in stats.items():\n",
    "    if 'Annual' in key:\n",
    "        print(f\"{key:.<35} ${value:>15,.0f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizations\n",
    "\n",
    "### 1. Distribution of Total Consumer Harm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create figure\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
    "\n",
    "# Histogram\n",
    "ax1.hist(results['total_harm'], bins=50, color='steelblue', alpha=0.7, edgecolor='black')\n",
    "ax1.axvline(results['total_harm'].mean(), color='red', linestyle='--', linewidth=2, \n",
    "            label=f'Mean: ${results[\"total_harm\"].mean():.0f}')\n",
    "ax1.axvline(results['total_harm'].median(), color='green', linestyle='--', linewidth=2, \n",
    "            label=f'Median: ${results[\"total_harm\"].median():.0f}')\n",
    "ax1.set_xlabel('Total Consumer Harm ($)')\n",
    "ax1.set_ylabel('Frequency')\n",
    "ax1.set_title('Distribution of Consumer Harm')\n",
    "ax1.legend()\n",
    "ax1.grid(True, alpha=0.3)\n",
    "\n",
    "# Log scale histogram for better view of tail\n",
    "ax2.hist(results['total_harm'], bins=50, color='darkblue', alpha=0.7, edgecolor='black')\n",
    "ax2.set_yscale('log')\n",
    "ax2.set_xlabel('Total Consumer Harm ($)')\n",
    "ax2.set_ylabel('Frequency (log scale)')\n",
    "ax2.set_title('Distribution of Consumer Harm (Log Scale)')\n",
    "ax2.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Harm Components Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create figure with subplots\n",
    "fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))\n",
    "\n",
    "# Box plot of harm components\n",
    "harm_components = pd.DataFrame({\n",
    "    'Hidden Fees': results['hidden_fees'],\n",
    "    'Service Failures': results['service_failure_harm'],\n",
    "    'Damages (Denied)': results['damage_harm']\n",
    "})\n",
    "harm_components.boxplot(ax=ax1)\n",
    "ax1.set_ylabel('Harm Amount ($)')\n",
    "ax1.set_title('Distribution of Harm Components')\n",
    "ax1.tick_params(axis='x', rotation=45)\n",
    "\n",
    "# Pie chart of average contribution\n",
    "component_means = [\n",
    "    results['hidden_fees'].mean(),\n",
    "    results['service_failure_harm'].mean(),\n",
    "    results['damage_harm'].mean()\n",
    "]\n",
    "labels = ['Hidden Fees', 'Service Failures', 'Damages (Denied)']\n",
    "colors = ['#ff9999', '#66b3ff', '#99ff99']\n",
    "ax2.pie(component_means, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n",
    "ax2.set_title('Average Harm Breakdown')\n",
    "\n",
    "# Stacked bar chart showing harm composition for percentiles\n",
    "percentiles = [25, 50, 75, 90, 95, 99]\n",
    "harm_by_percentile = pd.DataFrame()\n",
    "for p in percentiles:\n",
    "    mask = results['total_harm'] <= results['total_harm'].quantile(p/100)\n",
    "    harm_by_percentile[f'{p}th'] = [\n",
    "        results.loc[mask, 'hidden_fees'].mean(),\n",
    "        results.loc[mask, 'service_failure_harm'].mean(),\n",
    "        results.loc[mask, 'damage_harm'].mean()\n",
    "    ]\n",
    "\n",
    "harm_by_percentile.index = labels\n",
    "harm_by_percentile.T.plot(kind='bar', stacked=True, ax=ax3, color=colors)\n",
    "ax3.set_xlabel('Percentile')\n",
    "ax3.set_ylabel('Average Harm ($)')\n",
    "ax3.set_title('Harm Composition by Percentile')\n",
    "ax3.tick_params(axis='x', rotation=0)\n",
    "\n",
    "# Correlation heatmap\n",
    "corr_data = results[['service_cost', 'hidden_fees', 'service_failure_harm', \n",
    "                     'damage_harm', 'total_harm']].corr()\n",
    "sns.heatmap(corr_data, annot=True, cmap='coolwarm', center=0, ax=ax4)\n",
    "ax4.set_title('Correlation Matrix')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Cumulative Distribution and Risk Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create figure\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
    "\n",
    "# Cumulative distribution\n",
    "sorted_harm = np.sort(results['total_harm'])\n",
    "cumulative = np.arange(1, len(sorted_harm) + 1) / len(sorted_harm) * 100\n",
    "\n",
    "ax1.plot(sorted_harm, cumulative, linewidth=2, color='darkblue')\n",
    "ax1.set_xlabel('Total Consumer Harm ($)')\n",
    "ax1.set_ylabel('Cumulative Percentage (%)')\n",
    "ax1.set_title('Cumulative Distribution of Consumer Harm')\n",
    "ax1.grid(True, alpha=0.3)\n",
    "\n",
    "# Add percentile markers\n",
    "for p in [25, 50, 75, 90, 95]:\n",
    "    val = results['total_harm'].quantile(p/100)\n",
    "    ax1.axhline(y=p, color='gray', linestyle=':', alpha=0.5)\n",
    "    ax1.axvline(x=val, color='gray', linestyle=':', alpha=0.5)\n",
    "    ax1.text(val, 5, f'{p}th\\n${val:.0f}', ha='center', fontsize=8)\n",
    "\n",
    "# Risk categories\n",
    "risk_categories = pd.cut(results['total_harm'], \n",
    "                        bins=[0, 100, 500, 1000, 5000, 10000, float('inf')],\n",
    "                        labels=['Minimal', 'Low', 'Moderate', 'High', 'Very High', 'Extreme'])\n",
    "\n",
    "risk_counts = risk_categories.value_counts().sort_index()\n",
    "colors_risk = ['green', 'lightgreen', 'yellow', 'orange', 'red', 'darkred']\n",
    "\n",
    "ax2.bar(range(len(risk_counts)), risk_counts.values, color=colors_risk)\n",
    "ax2.set_xticks(range(len(risk_counts)))\n",
    "ax2.set_xticklabels(risk_counts.index, rotation=45)\n",
    "ax2.set_ylabel('Number of Customers')\n",
    "ax2.set_title('Customers by Risk Category')\n",
    "\n",
    "# Add percentage labels\n",
    "for i, (cat, count) in enumerate(risk_counts.items()):\n",
    "    pct = count / len(results) * 100\n",
    "    ax2.text(i, count + 50, f'{pct:.1f}%', ha='center')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interactive Dashboard\n",
    "\n",
    "Creating an interactive dashboard using Plotly for better exploration of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create interactive dashboard\n",
    "fig = make_subplots(\n",
    "    rows=2, cols=2,\n",
    "    subplot_titles=('Harm Distribution', 'Components Breakdown', \n",
    "                   'Cumulative Distribution', 'Scatter Analysis'),\n",
    "    specs=[[{'type': 'histogram'}, {'type': 'box'}],\n",
    "           [{'type': 'scatter'}, {'type': 'scatter'}]],\n",
    "    vertical_spacing=0.12,\n",
    "    horizontal_spacing=0.1\n",
    ")\n",
    "\n",
    "# 1. Interactive histogram\n",
    "fig.add_trace(\n",
    "    go.Histogram(x=results['total_harm'], nbinsx=50, name='Total Harm',\n",
    "                marker_color='steelblue', showlegend=False),\n",
    "    row=1, col=1\n",
    ")\n",
    "\n",
    "# Add mean and median lines\n",
    "fig.add_vline(x=results['total_harm'].mean(), line_dash=\"dash\", \n",
    "              line_color=\"red\", row=1, col=1)\n",
    "fig.add_vline(x=results['total_harm'].median(), line_dash=\"dash\", \n",
    "              line_color=\"green\", row=1, col=1)\n",
    "\n",
    "# 2. Box plots for components\n",
    "for component, color in zip(['hidden_fees', 'service_failure_harm', 'damage_harm'],\n",
    "                           ['red', 'blue', 'green']):\n",
    "    fig.add_trace(\n",
    "        go.Box(y=results[component], name=component.replace('_', ' ').title(),\n",
    "               marker_color=color),\n",
    "        row=1, col=2\n",
    "    )\n",
    "\n",
    "# 3. Cumulative distribution\n",
    "sorted_harm = np.sort(results['total_harm'])\n",
    "cumulative = np.arange(1, len(sorted_harm) + 1) / len(sorted_harm) * 100\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=sorted_harm, y=cumulative, mode='lines', name='Cumulative %',\n",
    "              line=dict(color='darkblue', width=2), showlegend=False),\n",
    "    row=2, col=1\n",
    ")\n",
    "\n",
    "# 4. Scatter plot: Service Cost vs Total Harm\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=results['service_cost'], y=results['total_harm'],\n",
    "              mode='markers', marker=dict(color=results['hidden_fees'],\n",
    "                                         colorscale='Viridis',\n",
    "                                         showscale=True,\n",
    "                                         colorbar=dict(title=\"Hidden Fees\")),\n",
    "              name='Customers', showlegend=False),\n",
    "    row=2, col=2\n",
    ")\n",
    "\n",
    "# Update layout\n",
    "fig.update_xaxes(title_text=\"Total Harm ($)\", row=1, col=1)\n",
    "fig.update_xaxes(title_text=\"Total Harm ($)\", row=2, col=1)\n",
    "fig.update_xaxes(title_text=\"Service Cost ($)\", row=2, col=2)\n",
    "fig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\n",
    "fig.update_yaxes(title_text=\"Harm ($)\", row=1, col=2)\n",
    "fig.update_yaxes(title_text=\"Cumulative %\", row=2, col=1)\n",
    "fig.update_yaxes(title_text=\"Total Harm ($)\", row=2, col=2)\n",
    "\n",
    "fig.update_layout(height=800, title_text=\"Consumer Harm Analysis Dashboard\",\n",
    "                 showlegend=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scenario Analysis\n",
    "\n",
    "Let's compare different regulatory scenarios to see their impact on consumer harm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define scenarios\n",
    "scenarios = {\n",
    "    'Status Quo': PARAMS,\n",
    "    'Moderate Reform': {\n",
    "        'base_service_cost': PARAMS['base_service_cost'],\n",
    "        'hidden_fees': {'min': 0, 'mode': 150, 'max': 500},  # Reduced by ~60%\n",
    "        'service_failure_prob': {'min': 0.10, 'mode': 0.20, 'max': 0.30},  # Improved by ~33%\n",
    "        'claim_denial_prob': {'min': 0.40, 'mode': 0.60, 'max': 0.80},  # Reduced by ~30%\n",
    "        'damage_occurrence_rate': PARAMS['damage_occurrence_rate'],\n",
    "        'average_damage_value': PARAMS['average_damage_value']\n",
    "    },\n",
    "    'Strong Reform': {\n",
    "        'base_service_cost': PARAMS['base_service_cost'],\n",
    "        'hidden_fees': {'min': 0, 'mode': 50, 'max': 200},  # Nearly eliminated\n",
    "        'service_failure_prob': {'min': 0.05, 'mode': 0.10, 'max': 0.15},  # Excellent service\n",
    "        'claim_denial_prob': {'min': 0.20, 'mode': 0.35, 'max': 0.50},  # Fair claims process\n",
    "        'damage_occurrence_rate': {'min': 0.03, 'mode': 0.08, 'max': 0.15},  # Better handling\n",
    "        'average_damage_value': PARAMS['average_damage_value']\n",
    "    }\n",
    "}\n",
    "\n",
    "# Run simulations for each scenario\n",
    "scenario_results = {}\n",
    "scenario_summary = []\n",
    "\n",
    "for scenario_name, scenario_params in scenarios.items():\n",
    "    print(f\"\\nRunning scenario: {scenario_name}\")\n",
    "    print(\"-\" * 40)\n",
    "    \n",
    "    # Run simulation\n",
    "    scenario_res = run_monte_carlo_simulation(scenario_params, verbose=False)\n",
    "    scenario_stats = calculate_statistics(scenario_res)\n",
    "    \n",
    "    # Store results\n",
    "    scenario_results[scenario_name] = {\n",
    "        'results': scenario_res,\n",
    "        'stats': scenario_stats\n",
    "    }\n",
    "    \n",
    "    # Create summary\n",
    "    summary = {\n",
    "        'Scenario': scenario_name,\n",
    "        'Mean Harm': scenario_stats['Mean Harm'],\n",
    "        'Median Harm': scenario_stats['Median Harm'],\n",
    "        '95th Percentile': scenario_stats['95th Percentile'],\n",
    "        '% Zero Harm': scenario_stats['% with Zero Harm'],\n",
    "        '% > $1000': scenario_stats['% with Harm > $1000'],\n",
    "        'Annual Impact (Mean)': scenario_stats['Annual Industry Impact (Mean)']\n",
    "    }\n",
    "    scenario_summary.append(summary)\n",
    "    \n",
    "    # Print key metrics\n",
    "    print(f\"Mean Harm: ${scenario_stats['Mean Harm']:,.2f}\")\n",
    "    print(f\"95th Percentile: ${scenario_stats['95th Percentile']:,.2f}\")\n",
    "    print(f\"Annual Industry Impact: ${scenario_stats['Annual Industry Impact (Mean)']:,.0f}\")\n",
    "    \n",
    "    if scenario_name != 'Status Quo':\n",
    "        reduction = (1 - scenario_stats['Mean Harm'] / scenario_results['Status Quo']['stats']['Mean Harm']) * 100\n",
    "        print(f\"Reduction from Status Quo: {reduction:.1f}%\")\n",
    "\n",
    "# Create comparison dataframe\n",
    "comparison_df = pd.DataFrame(scenario_summary)\n",
    "comparison_df.set_index('Scenario', inplace=True)\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"SCENARIO COMPARISON SUMMARY\")\n",
    "print(\"=\"*60)\n",
    "comparison_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scenario Comparison Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create comparison visualizations\n",
    "fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))\n",
    "\n",
    "# 1. Mean harm comparison\n",
    "scenarios_list = list(scenarios.keys())\n",
    "mean_harms = [scenario_results[s]['stats']['Mean Harm'] for s in scenarios_list]\n",
    "colors_scenario = ['red', 'orange', 'green']\n",
    "\n",
    "bars1 = ax1.bar(scenarios_list, mean_harms, color=colors_scenario)\n",
    "ax1.set_ylabel('Mean Harm ($)')\n",
    "ax1.set_title('Average Consumer Harm by Scenario')\n",
    "for bar, harm in zip(bars1, mean_harms):\n",
    "    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 10,\n",
    "             f'${harm:.0f}', ha='center')\n",
    "\n",
    "# 2. Distribution comparison\n",
    "for scenario, color in zip(scenarios_list, colors_scenario):\n",
    "    harm_data = scenario_results[scenario]['results']['total_harm']\n",
    "    ax2.hist(harm_data, bins=50, alpha=0.5, label=scenario, color=color, density=True)\n",
    "ax2.set_xlabel('Total Harm ($)')\n",
    "ax2.set_ylabel('Density')\n",
    "ax2.set_title('Harm Distribution by Scenario')\n",
    "ax2.legend()\n",
    "ax2.set_xlim(0, 5000)  # Focus on main distribution\n",
    "\n",
    "# 3. Percentile comparison\n",
    "percentiles = [10, 25, 50, 75, 90, 95]\n",
    "x = np.arange(len(percentiles))\n",
    "width = 0.25\n",
    "\n",
    "for i, (scenario, color) in enumerate(zip(scenarios_list, colors_scenario)):\n",
    "    percentile_values = [scenario_results[scenario]['results']['total_harm'].quantile(p/100) \n",
    "                        for p in percentiles]\n",
    "    ax3.bar(x + i*width, percentile_values, width, label=scenario, color=color)\n",
    "\n",
    "ax3.set_xlabel('Percentile')\n",
    "ax3.set_ylabel('Harm Amount ($)')\n",
    "ax3.set_title('Harm by Percentile and Scenario')\n",
    "ax3.set_xticks(x + width)\n",
    "ax3.set_xticklabels([f'{p}th' for p in percentiles])\n",
    "ax3.legend()\n",
    "\n",
    "# 4. Annual impact comparison\n",
    "annual_impacts = [scenario_results[s]['stats']['Annual Industry Impact (Mean)'] / 1e9 \n",
    "                 for s in scenarios_list]\n",
    "bars4 = ax4.bar(scenarios_list, annual_impacts, color=colors_scenario)\n",
    "ax4.set_ylabel('Annual Industry Impact ($ Billions)')\n",
    "ax4.set_title('Total Annual Industry Impact')\n",
    "for bar, impact in zip(bars4, annual_impacts):\n",
    "    ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,\n",
    "             f'${impact:.2f}B', ha='center')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Export Results\n",
    "\n",
    "Save all results for further analysis or reporting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export base simulation results\n",
    "results.to_csv('monte_carlo_base_results.csv', index=False)\n",
    "print(\"✓ Base results saved to 'monte_carlo_base_results.csv'\")\n",
    "\n",
    "# Export scenario comparison\n",
    "comparison_df.to_csv('scenario_comparison.csv')\n",
    "print(\"✓ Scenario comparison saved to 'scenario_comparison.csv'\")\n",
    "\n",
    "# Create detailed report\n",
    "with open('monte_carlo_report.txt', 'w') as f:\n",
    "    f.write(\"CONSUMER HARM MONTE CARLO SIMULATION REPORT\\n\")\n",
    "    f.write(\"=\" * 60 + \"\\n\\n\")\n",
    "    \n",
    "    f.write(f\"Simulation Parameters:\\n\")\n",
    "    f.write(f\"- Number of simulations: {N_SIMULATIONS:,}\\n\")\n",
    "    f.write(f\"- Annual transactions: {ANNUAL_TRANSACTIONS:,.0f}\\n\")\n",
    "    f.write(f\"- Service failure penalty: ${SERVICE_FAILURE_PENALTY:,}\\n\\n\")\n",
    "    \n",
    "    for scenario_name, scenario_data in scenario_results.items():\n",
    "        f.write(f\"\\n{scenario_name.upper()} SCENARIO\\n\")\n",
    "        f.write(\"-\" * 40 + \"\\n\")\n",
    "        \n",
    "        stats = scenario_data['stats']\n",
    "        f.write(f\"Mean Harm: ${stats['Mean Harm']:,.2f}\\n\")\n",
    "        f.write(f\"Median Harm: ${stats['Median Harm']:,.2f}\\n\")\n",
    "        f.write(f\"Standard Deviation: ${stats['Std Dev']:,.2f}\\n\")\n",
    "        f.write(f\"95th Percentile: ${stats['95th Percentile']:,.2f}\\n\")\n",
    "        f.write(f\"99th Percentile: ${stats['99th Percentile']:,.2f}\\n\")\n",
    "        f.write(f\"\\nCustomers with zero harm: {stats['Customers with Zero Harm']:,} ({stats['% with Zero Harm']:.1f}%)\\n\")\n",
    "        f.write(f\"Customers with harm > $1,000: {stats['Customers with Harm > $1000']:,} ({stats['% with Harm > $1000']:.1f}%)\\n\")\n",
    "        f.write(f\"Customers with harm > $5,000: {stats['Customers with Harm > $5000']:,} ({stats['% with Harm > $5000']:.1f}%)\\n\")\n",
    "        f.write(f\"\\nAnnual Industry Impact (Mean): ${stats['Annual Industry Impact (Mean)']:,.0f}\\n\")\n",
    "        f.write(f\"Annual Industry Impact (95th %ile): ${stats['Annual Industry Impact (95th %ile)']:,.0f}\\n\")\n",
    "\n",
    "print(\"✓ Detailed report saved to 'monte_carlo_report.txt'\")\n",
    "\n",
    "# Save the interactive dashboard\n",
    "fig.write_html(\"consumer_harm_dashboard.html\")\n",
    "print(\"✓ Interactive dashboard saved to 'consumer_harm_dashboard.html'\")\n",
    "\n",
    "print(\"\\n📊 All files exported successfully!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Key Insights and Recommendations\n",
    "\n",
    "Based on the Monte Carlo simulation results, here are the key findings:\n",
    "\n",
    "### 1. Current State (Status Quo)\n",
    "- The average consumer experiences significant harm from hidden fees and service issues\n",
    "- A small percentage of consumers bear disproportionately high costs\n",
    "- The industry-wide annual impact is substantial\n",
    "\n",
    "### 2. Reform Impact\n",
    "- Moderate reforms could reduce average harm by 40-50%\n",
    "- Strong reforms could achieve 70%+ reduction in consumer harm\n",
    "- The primary drivers of improvement are:\n",
    "  - Reduced hidden fees\n",
    "  - Better service quality\n",
    "  - Fairer claims processes\n",
    "\n",
    "### 3. Risk Distribution\n",
    "- Most consumers experience moderate harm\n",
    "- A significant tail of high-harm cases exists\n",
    "- Reforms particularly benefit the most vulnerable consumers\n",
    "\n",
    "### 4. Next Steps\n",
    "1. **Sensitivity Analysis**: Test which parameters have the greatest impact\n